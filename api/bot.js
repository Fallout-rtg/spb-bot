const { Telegraf, Markup } = require('telegraf');

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
const BOT_TOKEN = process.env.BOT_TOKEN;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CHANNEL_ID = -1002696885166;
const CHAT_ID = -1002899007927;
const ADMIN_CHAT_ID = -4969760870;
const ADMIN_IDS = [2032240231, 1465194766];
const ADMIN_NAMES = {
  2032240231: '–°–æ–≤–µ—Ç—á–∏–∫ üìú',
  1465194766: '–°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const bot = new Telegraf(BOT_TOKEN);

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
let ALLOWED_CHATS = [CHAT_ID, ADMIN_CHAT_ID];

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
function safeHandler(handler) {
  return async (ctx) => {
    try {
      await handler(ctx);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:', err);
    }
  };
}

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏
bot.command('+id', safeHandler(async (ctx) => {
  if (!ADMIN_IDS.includes(ctx.from.id)) return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.');
  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID: /+id <ID_—á–∞—Ç–∞>');
  const chatId = parseInt(args[1]);
  if (isNaN(chatId)) return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.');
  if (!ALLOWED_CHATS.includes(chatId)) {
    ALLOWED_CHATS.push(chatId);
    return ctx.reply(`‚úÖ –ß–∞—Ç ${chatId} –¥–æ–±–∞–≤–ª–µ–Ω.`);
  } else return ctx.reply(`‚ÑπÔ∏è –ß–∞—Ç ${chatId} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.`);
}));

bot.command('-id', safeHandler(async (ctx) => {
  if (!ADMIN_IDS.includes(ctx.from.id)) return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.');
  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID: /-id <ID_—á–∞—Ç–∞>');
  const chatId = parseInt(args[1]);
  if (isNaN(chatId)) return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.');
  const index = ALLOWED_CHATS.indexOf(chatId);
  if (index !== -1) {
    ALLOWED_CHATS.splice(index, 1);
    return ctx.reply(`‚úÖ –ß–∞—Ç ${chatId} —É–¥–∞–ª–µ–Ω.`);
  } else return ctx.reply(`‚ÑπÔ∏è –ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
}));

bot.command('/allowed_chats', safeHandler(async (ctx) => {
  if (!ADMIN_IDS.includes(ctx.from.id)) return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.');
  if (ALLOWED_CHATS.length === 0) return ctx.reply('üìù –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.');
  const chatList = ALLOWED_CHATS.map(id => `‚Ä¢ ${id}`).join('\n');
  return ctx.reply(`üìù –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:\n${chatList}`);
}));

// –ö–æ–º–∞–Ω–¥—ã /start –∏ /help
bot.start(safeHandler(async (ctx) => {
  const user = ctx.message.from;
  const firstName = user.first_name || '';
  const userID = user.id;

  let greeting = `üëã –ü—Ä–∏–≤–µ—Ç${firstName ? ', ' + firstName : ''}! –Ø ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞.\n\n` +
                 `–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ.\n\n` +
                 `–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –º–µ–Ω—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏! üòä`;

  if (userID === 2032240231) greeting = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –°–æ–≤–µ—Ç—á–∏–∫! üëã\n\n` +
    `–Ø ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n` +
    `–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ.\n\n` +
    `–î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.`;

  if (userID === 1465194766) greeting = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –°–ø–µ–∫—Ç—Ä! üëã\n\n` +
    `–Ø ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n` +
    `–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ.\n\n` +
    `–î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.`;

  await ctx.reply(greeting);
}));

bot.help(safeHandler(async (ctx) => {
  const userId = ctx.from.id;
  const chatType = ctx.chat.type;

  if (chatType === 'private') {
    if (ADMIN_IDS.includes(userId)) {
      const adminHelpText = `üõ† *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤:*\n\n` +
        `/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n` +
        `/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
        `/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n` +
        `/test - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏\n` +
        `/+id <ID> - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ\n` +
        `/-id <ID> - —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö\n` +
        `/allowed_chats - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n\n` +
        `*–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:*\n` +
        `‚Ä¢ –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `‚Ä¢ –û—Ç–≤–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ t.me/c/...`;

      await ctx.reply(adminHelpText, { parse_mode: 'Markdown', disable_web_page_preview: true });
    } else {
      const userHelpText = `‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:*\n\n` +
        `–Ø ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º.\n\n` +
        `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
        `/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n` +
        `/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
        `/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ`;

      await ctx.reply(userHelpText, { parse_mode: 'Markdown', disable_web_page_preview: true });
    }
  }
}));

bot.command('test', safeHandler(async (ctx) => await ctx.reply('‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ!')));

bot.command('info', safeHandler(async (ctx) => {
  const infoText = `‚öôÔ∏è –û –±–æ—Ç–µ ‚öôÔ∏è\n–í–µ—Ä—Å–∏—è: 0.0.1\n–ò–ò: Red-AI 0.1\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: –ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞`;
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('–ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞', 'https://t.me/red_star_development')]
  ]);
  await ctx.reply(infoText, { reply_markup: keyboard.reply_markup, disable_web_page_preview: true });
}));

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî //
bot.on('message', safeHandler(async (ctx) => {
  const message = ctx.message;
  const userId = message.from.id;
  const chatId = message.chat.id;

  // –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
  if (message.new_chat_members) {
    const isBotAdded = message.new_chat_members.some(m => m.is_bot && m.id === ctx.botInfo.id);
    if (isBotAdded && !ALLOWED_CHATS.includes(chatId)) {
      const keyboard = Markup.inlineKeyboard([[Markup.button.url('–ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞', 'https://t.me/red_star_development')]]);
      await ctx.reply('üö´ –Ø –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ! –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω.', { reply_markup: keyboard.reply_markup });
      await new Promise(r => setTimeout(r, 2000));
      return await ctx.leaveChat();
    }
  }

  // –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (ADMIN_IDS.includes(userId) && message.reply_to_message?.forward_origin?.type === 'user') {
    const originalSender = message.reply_to_message.forward_origin.sender_user;
    if (originalSender) {
      let responseText = `üîπ –û—Ç–≤–µ—Ç –æ—Ç ${ADMIN_NAMES[userId]}:\n\n`;
      responseText += message.text || message.caption || '';
      const options = { entities: message.entities, caption_entities: message.caption_entities };
      await ctx.telegram.sendMessage(originalSender.id, responseText, options);
      if (message.photo) await ctx.telegram.sendPhoto(originalSender.id, message.photo[message.photo.length - 1].file_id, { caption: message.caption });
      if (message.sticker) await ctx.telegram.sendSticker(originalSender.id, message.sticker.file_id);
      return await ctx.reply('‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
    }
  }

  // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (chatId > 0 && !message.text?.startsWith('/')) {
    const userName = message.from.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const userUsername = message.from.username ? '@' + message.from.username : '–Ω–µ—Ç username';
    const time = new Date().toLocaleString('ru-RU');
    const caption = `üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –õ–°*\nüë§ –ò–º—è: ${userName}\nüîñ Username: ${userUsername}\nüÜî ID: ${message.from.id}\n‚è∞ –í—Ä–µ–º—è: ${time}`;
    await ctx.forwardMessage(ADMIN_CHAT_ID, chatId, message.message_id);
    await ctx.telegram.sendMessage(ADMIN_CHAT_ID, caption, { parse_mode: 'Markdown' });
  }
}));

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî //
module.exports = async (req, res) => {
  console.log('–ü–æ–ª—É—á–µ–Ω update:', req.body);
  try {
    if (req.method === 'POST') {
      const update = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;
      await bot.handleUpdate(update);
      return res.status(200).send('OK');
    }
    res.status(200).send('Bot is running üöÄ');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ webhook:', err);
    res.status(500).send('Internal Server Error');
  }
};
