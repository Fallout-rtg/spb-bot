const { Telegraf, Markup } = require('telegraf');

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  throw new Error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CHANNEL_ID = -1002696885166;
const CHAT_ID = -1002899007927; // –ß–∞—Ç –∫–∞–Ω–∞–ª–∞
const ADMIN_CHAT_ID = -4969760870; // –ß–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
const ADMIN_IDS = [2032240231, 1465194766];
const ADMIN_NAMES = {
  2032240231: '–°–æ–≤–µ—Ç—á–∏–∫ üìú',
  1465194766: '–°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –ú–∞—Å—Å–∏–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
let ALLOWED_CHATS = [CHAT_ID, ADMIN_CHAT_ID];

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–ù–´–ú–ò –ß–ê–¢–ê–ú–ò ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî //
bot.command('+id', async (ctx) => {
  if (!ADMIN_IDS.includes(ctx.from.id)) {
    return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
  }
  const args = ctx.message.text.split(' ');
  if (args.length < 2) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞: /+id <ID_—á–∞—Ç–∞>');
  }
  const chatId = parseInt(args[1]);
  if (isNaN(chatId)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.');
  }
  if (!ALLOWED_CHATS.includes(chatId)) {
    ALLOWED_CHATS.push(chatId);
    return ctx.reply(`‚úÖ –ß–∞—Ç ${chatId} –¥–æ–±–∞–≤–ª–µ–Ω.`);
  } else {
    return ctx.reply(`‚ÑπÔ∏è –ß–∞—Ç ${chatId} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.`);
  }
});

bot.command('-id', async (ctx) => {
  if (!ADMIN_IDS.includes(ctx.from.id)) {
    return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
  }
  const args = ctx.message.text.split(' ');
  if (args.length < 2) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞: /-id <ID_—á–∞—Ç–∞>');
  }
  const chatId = parseInt(args[1]);
  if (isNaN(chatId)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.');
  }
  const index = ALLOWED_CHATS.indexOf(chatId);
  if (index !== -1) {
    ALLOWED_CHATS.splice(index, 1);
    return ctx.reply(`‚úÖ –ß–∞—Ç ${chatId} —É–¥–∞–ª—ë–Ω.`);
  } else {
    return ctx.reply(`‚ÑπÔ∏è –ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  }
});

bot.command('allowed_chats', async (ctx) => {
  if (!ADMIN_IDS.includes(ctx.from.id)) {
    return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
  }
  if (ALLOWED_CHATS.length === 0) {
    return ctx.reply('üìù –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.');
  }
  const chatList = ALLOWED_CHATS.map(id => `‚Ä¢ ${id}`).join('\n');
  return ctx.reply(`üìù –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã:\n${chatList}`);
});

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ó–ê–©–ò–¢–ê –û–¢ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ß–£–ñ–ò–ï –ß–ê–¢–´ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî //
bot.on('message', async (ctx, next) => {
  if (ctx.message.new_chat_members) {
    const newMembers = ctx.message.new_chat_members;
    const isBotAdded = newMembers.some(m => m.is_bot && m.id === ctx.botInfo.id);
    if (isBotAdded) {
      const chatId = ctx.chat.id;
      if (!ALLOWED_CHATS.includes(chatId)) {
        try {
          const keyboard = Markup.inlineKeyboard([
            [Markup.button.url('–ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞', 'https://t.me/red_star_development')]
          ]);
          await ctx.reply(
            `üö´ –Ø –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ!\n\n–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞.`,
            { reply_markup: keyboard.reply_markup, disable_web_page_preview: true }
          );
          await new Promise(r => setTimeout(r, 2000));
          await ctx.leaveChat();
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞:', err);
        }
      }
    }
  }
  return next();
});

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î–´ /HELP ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî //
bot.help(async (ctx) => {
  const userId = ctx.from.id;
  const chatType = ctx.chat.type;

  if (chatType === 'private') {
    if (ADMIN_IDS.includes(userId)) {
      const adminHelpText = `üõ†Ô∏è *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤:*\n\n`
        + `/start - –∑–∞–ø—É—Å–∫\n`
        + `/help - –ø–æ–º–æ—â—å\n`
        + `/info - –∏–Ω—Ñ–æ –æ –±–æ—Ç–µ\n`
        + `/test - –ø—Ä–æ–≤–µ—Ä–∫–∞\n`
        + `/+id <ID> - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç\n`
        + `/-id <ID> - —É–¥–∞–ª–∏—Ç—å —á–∞—Ç\n`
        + `/allowed_chats - —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n\n`
        + `*–§—É–Ω–∫—Ü–∏–∏:*\n`
        + `‚Ä¢ –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n`
        + `‚Ä¢ –û—Ç–≤–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ t.me/c/...`;
      await ctx.reply(adminHelpText, { parse_mode: 'Markdown' });
    } else {
      const userHelpText = `‚ÑπÔ∏è *–ü–æ–º–æ—â—å:*\n\n`
        + `–Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞. –î–æ–±–∞–≤–ª—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.\n\n`
        + `*–ö–æ–º–∞–Ω–¥—ã:*\n`
        + `/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å\n`
        + `/help - –ø–æ–º–æ—â—å\n`
        + `/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è`;
      await ctx.reply(userHelpText, { parse_mode: 'Markdown' });
    }
  }
});

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ö–û–ú–ê–ù–î–´ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî //
bot.start((ctx) => {
  const user = ctx.message.from;
  const userName = user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const userID = user.id;
  let greeting = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${userName}! üëã\n\n–Ø ‚Äî –±–æ—Ç –∫–∞–Ω–∞–ª–∞. –î–æ–±–∞–≤–ª—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.`;
  if (ADMIN_IDS.includes(userID)) {
    const adminName = ADMIN_NAMES[userID] || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
    greeting = `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${adminName}! üëã\n\n–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å.`;
  }
  ctx.reply(greeting);
});

bot.command('test', (ctx) => ctx.reply('‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!'));

bot.command('info', (ctx) => {
  const infoText = `‚öôÔ∏è–û –±–æ—Ç–µ‚öôÔ∏è\n–í–µ—Ä—Å–∏—è: 0.0.1\n–ò–ò: Red-AI 0.1\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: –ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞`;
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('–ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞', 'https://t.me/red_star_development')]
  ]);
  ctx.reply(infoText, { reply_markup: keyboard.reply_markup, disable_web_page_preview: true });
});

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ü–ï–†–ï–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî //
bot.on('message', async (ctx) => {
  const message = ctx.message;
  const userId = message.from.id;
  const chatId = message.chat.id;

  // –û—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–æ–≤
  if (ADMIN_IDS.includes(userId)) {
    if (message.reply_to_message && message.reply_to_message.forward_origin?.type === 'user') {
      const originalSender = message.reply_to_message.forward_origin.sender_user;
      if (originalSender) {
        const userChatId = originalSender.id;
        const adminName = ADMIN_NAMES[userId] || '–ê–¥–º–∏–Ω';
        let responseText = `üîπ –û—Ç–≤–µ—Ç –æ—Ç ${adminName}:\n\n`;
        if (message.text) responseText += message.text;
        else if (message.caption) responseText += message.caption;
        try {
          await ctx.telegram.sendMessage(userChatId, responseText);
          await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', err);
          await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.');
        }
      }
    }
    return;
  }

  // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (chatId > 0 && !message.text?.startsWith('/')) {
    const user = message.from;
    const userName = user.first_name || user.last_name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const userUsername = user.username ? `@${user.username}` : '–Ω–µ—Ç username';
    const time = new Date().toLocaleString('ru-RU');
    const caption = `üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –õ–°*\nüë§ *–ò–º—è:* ${userName}\nüîñ *Username:* ${userUsername}\nüÜî *ID:* ${user.id}\n‚è∞ *–í—Ä–µ–º—è:* ${time}`;
    try {
      await ctx.forwardMessage(ADMIN_CHAT_ID, chatId, message.message_id);
      await ctx.telegram.sendMessage(ADMIN_CHAT_ID, caption, { parse_mode: 'Markdown' });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:', err);
    }
  }
});

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –≠–ö–°–ü–û–†–¢ –î–õ–Ø VERCEL ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî //
module.exports = async (req, res) => {
  try {
    await bot.handleUpdate(req.body);
    res.status(200).send('OK');
  } catch (err) {
    console.error('Error handling update:', err);
    res.status(500).send('Internal Server Error');
  }
};
