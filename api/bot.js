const { Telegraf } = require('telegraf');

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHANNEL_USERNAME = 'spektrminda';
const CHANNEL_ID = -1002696885166;
const CHAT_ID = -1002899007927;
const ADMIN_CHAT_ID = -1002974532347;
const ADMIN_IDS = [2032240231, 1465194766];
const ADMIN_NAMES = {
  2032240231: '–°–æ–≤–µ—Ç—á–∏–∫ üìú',
  1465194766: '–°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è'
};

const bot = new Telegraf(BOT_TOKEN);

let ALLOWED_CHATS = [CHAT_ID, ADMIN_CHAT_ID];
let ACTIVE_CHATS = [];
let REPLY_LINKS = {};

const COMMENT_TEXT = `
<b>‚ö†Ô∏è –ö—Ä–∞—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b>

‚Ä¢ –°–ø–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â—ë–Ω.
‚Ä¢ –ó–∞–ø—Ä–µ—â—ë–Ω –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ.
‚Ä¢ –í–µ–¥–∏—Ç–µ —Å–µ–±—è –ø—Ä–∏–ª–∏—á–Ω–æ, –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –ø–æ—Å—Ç–∞.
‚Ä¢ –õ—é–±–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∏–ª–∏ –æ–∫–æ–ª–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Å–∞—é—â–∞—è—Å—è —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –∑–∞–ø—Ä–µ—â–µ–Ω.
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å—Å—è, –∞ —É—á–∞—Å—Ç–Ω–∏–∫ –µ–≥–æ –∑–∞–ø–æ—Å—Ç–∏–≤—à–∏–π –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.

üì° <a href="https://t.me/+qAcLEuOQVbZhYWFi">–ù–∞—à —á–∞—Ç</a> | <a href="https://discord.gg/rBnww7ytM3">Discord</a> | <a href="https://www.tiktok.com/@spectr_mindustry?_t=ZN-8yZCVx33mr9&_r=1">TikTok</a>
`;

function safeHandler(handler) {
  return async (ctx) => {
    try {
      await handler(ctx);
    } catch (err) {
      console.error(err);
    }
  };
}

function isAdmin(ctx) {
  return ADMIN_IDS.includes(ctx.from.id);
}

function isPrivate(ctx) {
  return ctx.chat.type === 'private';
}

function restrictedCommand(handler, { adminOnly = false } = {}) {
  return safeHandler(async (ctx) => {
    if (!isPrivate(ctx) && !isAdmin(ctx)) return ctx.reply('‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–°.');
    if (adminOnly && !isAdmin(ctx)) return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.');
    await handler(ctx);
  });
}

async function checkBotChats(bot) {
  for (const chatId of ACTIVE_CHATS.slice()) {
    if (!ALLOWED_CHATS.includes(chatId)) {
      try {
        await bot.telegram.sendMessage(
          chatId,
          'üö´ –≠—Ç–æ—Ç —á–∞—Ç –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–ª –∑–¥–µ—Å—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ <a href="https://t.me/red_star_development">–ö—Ä–∞—Å–Ω–æ–π –∑–≤–µ–∑–¥–µ</a>.',
          { parse_mode: 'HTML', disable_web_page_preview: true }
        );
      } catch (e) {}
      await bot.telegram.leaveChat(chatId);
      ACTIVE_CHATS = ACTIVE_CHATS.filter(id => id !== chatId);
    }
  }
}

bot.start(restrictedCommand(async (ctx) => {
  const user = ctx.message.from;
  const firstName = user.first_name || '';
  const userID = user.id;
  let greeting = `üëã –ü—Ä–∏–≤–µ—Ç${firstName ? ', ' + firstName : ''}! –Ø ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞.\n\n–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –º–µ–Ω—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏! üòä`;
  if (userID === 2032240231) greeting = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –°–æ–≤–µ—Ç—á–∏–∫! üëã\n\n–Ø ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ.\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.`;
  if (userID === 1465194766) greeting = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –°–ø–µ–∫—Ç—Ä! üëã\n\n–Ø ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ.\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.`;
  await ctx.reply(greeting);
}));

bot.help(restrictedCommand(async (ctx) => {
  if (isAdmin(ctx)) {
    const adminHelpText = `
<b>üõ† –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤:</b>

/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/test ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
/ida ID_—á–∞—Ç–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ
/idr ID_—á–∞—Ç–∞ ‚Äî —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
/allowed_chats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
/comment_text ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏
/reply_link ‚Äî —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
`;
    await ctx.reply(adminHelpText, { parse_mode: 'HTML', disable_web_page_preview: true });
  } else {
    const userHelpText = `
‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:

–Ø ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º.

–ö–æ–º–∞–Ω–¥—ã:
/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
`;
    await ctx.reply(userHelpText, { parse_mode: 'HTML', disable_web_page_preview: true });
  }
}));

bot.command('info', restrictedCommand(async (ctx) => {
  await ctx.reply(`‚öôÔ∏è –û –±–æ—Ç–µ\n–í–µ—Ä—Å–∏—è: 0.0.1\n–ò–ò: Red-AI 0.1\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: <a href="https://t.me/red_star_development">–ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞</a>`, { parse_mode: 'HTML', disable_web_page_preview: true });
}));

bot.command('test', restrictedCommand(async (ctx) => {
  await ctx.reply('‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ!');
}, { adminOnly: true }));

bot.command('ida', restrictedCommand(async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞: /ida <ID>');
  const chatId = parseInt(args[1]);
  if (isNaN(chatId)) return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.');
  if (!ALLOWED_CHATS.includes(chatId)) ALLOWED_CHATS.push(chatId), await ctx.reply(`‚úÖ –ß–∞—Ç ${chatId} –¥–æ–±–∞–≤–ª–µ–Ω.`);
  else return ctx.reply(`‚ÑπÔ∏è –ß–∞—Ç ${chatId} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.`);
  await checkBotChats(bot);
}, { adminOnly: true }));

bot.command('idr', restrictedCommand(async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞: /idr <ID>');
  const chatId = parseInt(args[1]);
  if (isNaN(chatId)) return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.');
  const index = ALLOWED_CHATS.indexOf(chatId);
  if (index !== -1) ALLOWED_CHATS.splice(index, 1), await ctx.reply(`‚úÖ –ß–∞—Ç ${chatId} —É–¥–∞–ª–µ–Ω.`);
  else return ctx.reply(`‚ÑπÔ∏è –ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  await checkBotChats(bot);
}, { adminOnly: true }));

bot.command('allowed_chats', restrictedCommand(async (ctx) => {
  if (ALLOWED_CHATS.length === 0) return ctx.reply('üìù –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.');
  const chatList = ALLOWED_CHATS.map(id => `‚Ä¢ ${id}`).join('\n');
  await ctx.reply(`üìù –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã:\n${chatList}`);
}, { adminOnly: true }));

bot.command('comment_text', restrictedCommand(async (ctx) => {
  await ctx.reply(COMMENT_TEXT, { parse_mode: 'HTML', disable_web_page_preview: true });
}, { adminOnly: true }));

bot.command('reply_link', restrictedCommand(async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /reply_link t.me/c/...');
  const link = args[1];
  const match = link.match(/t\.me\/c\/(\d+)\/(\d+)/);
  if (!match) return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ t.me/c/...');
  const chatId = -1000000000000 + parseInt(match[1], 10);
  const messageId = parseInt(match[2], 10);
  REPLY_LINKS[ctx.from.id] = { chatId, messageId };
  await ctx.reply('‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏.');
}, { adminOnly: true }));

bot.on('message', safeHandler(async (ctx) => {
  const message = ctx.message;
  const userId = message.from.id;
  const chatId = message.chat.id;

  if (message.new_chat_members) {
    const isBotAdded = message.new_chat_members.some(m => m.is_bot && m.id === ctx.botInfo.id);
    if (isBotAdded) {
      ACTIVE_CHATS.push(chatId);
      if (!ALLOWED_CHATS.includes(chatId)) {
        await ctx.reply('üö´ –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–ª –∑–¥–µ—Å—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ <a href="https://t.me/red_star_development">–ö—Ä–∞—Å–Ω–æ–π –∑–≤–µ–∑–¥–µ</a>.', { parse_mode: 'HTML', disable_web_page_preview: true });
        await ctx.leaveChat();
        ACTIVE_CHATS = ACTIVE_CHATS.filter(id => id !== chatId);
      }
    }
  }

  if (isAdmin(ctx) && REPLY_LINKS[userId] && !(message.text?.startsWith('/'))) {
    const { chatId: targetChat, messageId: targetMessage } = REPLY_LINKS[userId];
    try {
      if (message.text) await ctx.telegram.sendMessage(targetChat, message.text, { reply_to_message_id: targetMessage, disable_web_page_preview: true });
      if (message.photo) {
        const fileId = message.photo[message.photo.length - 1].file_id;
        await ctx.telegram.sendPhoto(targetChat, fileId, { caption: message.caption || '', reply_to_message_id: targetMessage });
      }
      if (message.video) await ctx.telegram.sendVideo(targetChat, message.video.file_id, { caption: message.caption || '', reply_to_message_id: targetMessage });
      if (message.document) await ctx.telegram.sendDocument(targetChat, message.document.file_id, { caption: message.caption || '', reply_to_message_id: targetMessage });
      if (message.sticker) await ctx.telegram.sendSticker(targetChat, message.sticker.file_id);
      if (message.animation) await ctx.telegram.sendAnimation(targetChat, message.animation.file_id, { caption: message.caption || '', reply_to_message_id: targetMessage });
      if (message.poll) {
        const p = message.poll;
        const options = p.options.map(o => o.text);
        await ctx.telegram.sendPoll(targetChat, p.question, options, { is_anonymous: p.is_anonymous, type: p.type });
      }
      await ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
      delete REPLY_LINKS[userId];
    } catch (err) {
      console.error(err);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: ${err.description || err.message || err}`);
    }
    return;
  }

  if (!isAdmin(ctx) && isPrivate(ctx) && !message.text?.startsWith('/')) {
    const userName = message.from.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const userUsername = message.from.username ? '@' + message.from.username : '–Ω–µ—Ç username';
    const time = new Date().toLocaleString('ru-RU');
    const caption = `üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –õ–°\nüë§ –ò–º—è: ${userName}\nüîñ Username: ${userUsername}\nüÜî ID: ${userId}\n‚è∞ –í—Ä–µ–º—è: ${time}`;
    await ctx.forwardMessage(ADMIN_CHAT_ID, chatId, message.message_id);
    await ctx.telegram.sendMessage(ADMIN_CHAT_ID, caption, { parse_mode: 'HTML', disable_web_page_preview: true });
  }

  if (chatId === CHAT_ID && message.forward_from_chat?.id === CHANNEL_ID && message.forward_from_message_id) {
    try {
      const sentMessage = await ctx.telegram.sendMessage(CHAT_ID, COMMENT_TEXT, { reply_to_message_id: message.message_id, parse_mode: 'HTML', disable_web_page_preview: true });
      const postLink = `https://t.me/${message.forward_from_chat.username}/${message.forward_from_message_id}`;
      const commentLink = `https://t.me/c/${String(CHAT_ID).slice(4)}/${sentMessage.message_id}`;
      await ctx.telegram.sendMessage(ADMIN_CHAT_ID, `‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–ü–æ—Å—Ç: ${postLink}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${commentLink}`, { parse_mode: 'HTML', disable_web_page_preview: true });
    } catch (error) {
      await ctx.telegram.sendMessage(ADMIN_CHAT_ID, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!\n–û—à–∏–±–∫–∞: ${error.message}`, { parse_mode: 'HTML', disable_web_page_preview: true });
    }
  }
}));

module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body);
      res.status(200).send('OK');
    } else {
      res.status(200).send('Bot is running.');
    }
  } catch (error) {
    console.error(error);
    if (!res.headersSent) res.status(500).send('Internal Server Error');
  }
};
